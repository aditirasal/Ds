#include <stdio.h>
#include <ctype.h>
#include <string.h>
int top = -1;
char stack[100];
int push(char array[], char x);
char pop(char array[]);
char peep(char array[]);
int InfixToPostfix(char source[], char target[]);
int getPriority(char c);
int main()
{
char infix[100];
char postfix[100];
char temp;
printf("Aditi Rasal\n");~
printf("Enter the infix expression:\n");
gets(infix);
temp=')';
strncat(infix,&temp,1);
strcpy(postfix, "");
InfixToPostfix(infix,postfix);
printf("\nThe postfix expression is \n%s",postfix);
return 0;
}
int InfixToPostfix(char source[], char target[])
{
int i = 0;
push(stack, '(');
while (source[i] != '\0')
{
if (source[i] == '(')
{
push(stack, '(');
}
else if (isdigit(source[i]) || isalpha(source[i]))
{
strncat(target, &source[i], 1);
}
else if (source[i] == ')')
{
while(stack[top]!='(')
{
char temp=pop(stack);
strncat(target, &temp, 1);
}
if(stack[top]=='(')
{
pop(stack);
}
}
else if (source[i] == '+' || source[i] == '-' || source[i] == '/' || source[i] == '*' || source[i] ==
'%')
{
while (getPriority(source[i]) <= getPriority(peep(stack)))
{
char temp = pop(stack);
strncat(target, &temp, 1);
}
push(stack, source[i]);
}
i++;
}
if(top!=-1)
{
while (peep(stack) != '(')
{
char temp = pop(stack);
strncat(target, &temp, 1);
}
}
return 0;
}
int getPriority(char c)
{
if (c == '+' || c == '-')
return 1;
if (c =='%' || c == '*' || c == '/')
return 2;
if (c == '(')
return 0;
return -1;
}
int push(char array[], char x)
{
top++;
if (top == 100)
{
printf("Overflow, sorry\n");
top--;
return 0;
}
else
{
array[top] = x;
return 0;
}
}
char pop(char array[])
{
if (top >= 0 && top < 100)
{
char temp = array[top];
top--;
return temp;
}
else if (top == -1)
{
printf("Underflow, sorry\n");
return ' ';
}
return ' ';
}
char peep(char array[])
{
if (top == -1)
return ' ';
return array[top];
}
