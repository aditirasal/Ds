#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Node* head = NULL;
void insertAtStart(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
if (head == NULL) {
head = newNode;
newNode->next = head;
} else {
struct Node* temp = head;
while (temp->next != head) {
temp = temp->next;
}
newNode->next = head;
temp->next = newNode;
head = newNode;
}
}
void insertAtEnd(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = value;
if (head == NULL) {
head = newNode;
newNode->next = head;
} else {
struct Node* temp = head;
while (temp->next != head) {
temp = temp->next;
}
newNode->next = head;
temp->next = newNode;
}
}
void printList() {
struct Node* temp = head;
if (head == NULL) {
printf("The circular linked list is empty.\n");
return;
}
do {
printf("%d ", temp->data);
temp = temp->next;
} while (temp != head);
printf("\n");
}
int main() {
int choice, value;
while (1) {
printf("1. Insert at the start\n2. Insert at the end\n3. Print list\n4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to insert at the start: ");
scanf("%d", &value);
insertAtStart(value);
break;
case 2:
printf("Enter the value to insert at the end: ");
scanf("%d", &value);
insertAtEnd(value);
break;
case 3:
printf("Circular Linked List: ");
printList();
break;
case 4:
exit(0);
default:
printf("Invalid choice, please try again.\n");
}
}
}
